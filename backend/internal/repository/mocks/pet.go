// Code generated by MockGen. DO NOT EDIT.
// Source: pet.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "backend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetRepository) Create(pet *models.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPetRepositoryMockRecorder) Create(pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetRepository)(nil).Create), pet)
}

// Delete mocks base method.
func (m *MockPetRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetRepository)(nil).Delete), id)
}

// GetAllByClient mocks base method.
func (m *MockPetRepository) GetAllByClient(id uint64) ([]models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByClient", id)
	ret0, _ := ret[0].([]models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByClient indicates an expected call of GetAllByClient.
func (mr *MockPetRepositoryMockRecorder) GetAllByClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByClient", reflect.TypeOf((*MockPetRepository)(nil).GetAllByClient), id)
}

// GetAllPets mocks base method.
func (m *MockPetRepository) GetAllPets() ([]models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPets")
	ret0, _ := ret[0].([]models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPets indicates an expected call of GetAllPets.
func (mr *MockPetRepositoryMockRecorder) GetAllPets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPets", reflect.TypeOf((*MockPetRepository)(nil).GetAllPets))
}

// GetPet mocks base method.
func (m *MockPetRepository) GetPet(id uint64) (*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPet", id)
	ret0, _ := ret[0].(*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPet indicates an expected call of GetPet.
func (mr *MockPetRepositoryMockRecorder) GetPet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPet", reflect.TypeOf((*MockPetRepository)(nil).GetPet), id)
}
