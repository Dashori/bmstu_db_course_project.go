// Code generated by MockGen. DO NOT EDIT.
// Source: doctor.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "backend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDoctorRepository is a mock of DoctorRepository interface.
type MockDoctorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDoctorRepositoryMockRecorder
}

// MockDoctorRepositoryMockRecorder is the mock recorder for MockDoctorRepository.
type MockDoctorRepositoryMockRecorder struct {
	mock *MockDoctorRepository
}

// NewMockDoctorRepository creates a new mock instance.
func NewMockDoctorRepository(ctrl *gomock.Controller) *MockDoctorRepository {
	mock := &MockDoctorRepository{ctrl: ctrl}
	mock.recorder = &MockDoctorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoctorRepository) EXPECT() *MockDoctorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDoctorRepository) Create(doctor *models.Doctor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", doctor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDoctorRepositoryMockRecorder) Create(doctor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDoctorRepository)(nil).Create), doctor)
}

// Delete mocks base method.
func (m *MockDoctorRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDoctorRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDoctorRepository)(nil).Delete), id)
}

// GetAllDoctors mocks base method.
func (m *MockDoctorRepository) GetAllDoctors() ([]models.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDoctors")
	ret0, _ := ret[0].([]models.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDoctors indicates an expected call of GetAllDoctors.
func (mr *MockDoctorRepositoryMockRecorder) GetAllDoctors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDoctors", reflect.TypeOf((*MockDoctorRepository)(nil).GetAllDoctors))
}

// GetDoctorById mocks base method.
func (m *MockDoctorRepository) GetDoctorById(id uint64) (*models.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorById", id)
	ret0, _ := ret[0].(*models.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorById indicates an expected call of GetDoctorById.
func (mr *MockDoctorRepositoryMockRecorder) GetDoctorById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorById", reflect.TypeOf((*MockDoctorRepository)(nil).GetDoctorById), id)
}

// GetDoctorByLogin mocks base method.
func (m *MockDoctorRepository) GetDoctorByLogin(login string) (*models.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorByLogin", login)
	ret0, _ := ret[0].(*models.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorByLogin indicates an expected call of GetDoctorByLogin.
func (mr *MockDoctorRepositoryMockRecorder) GetDoctorByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorByLogin", reflect.TypeOf((*MockDoctorRepository)(nil).GetDoctorByLogin), login)
}

// UpdateShedule mocks base method.
func (m *MockDoctorRepository) UpdateShedule(id, newStart, newEnd uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShedule", id, newStart, newEnd)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShedule indicates an expected call of UpdateShedule.
func (mr *MockDoctorRepositoryMockRecorder) UpdateShedule(id, newStart, newEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShedule", reflect.TypeOf((*MockDoctorRepository)(nil).UpdateShedule), id, newStart, newEnd)
}
