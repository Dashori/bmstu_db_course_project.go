// Code generated by MockGen. DO NOT EDIT.
// Source: record.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "backend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRecordRepository is a mock of RecordRepository interface.
type MockRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecordRepositoryMockRecorder
}

// MockRecordRepositoryMockRecorder is the mock recorder for MockRecordRepository.
type MockRecordRepositoryMockRecorder struct {
	mock *MockRecordRepository
}

// NewMockRecordRepository creates a new mock instance.
func NewMockRecordRepository(ctrl *gomock.Controller) *MockRecordRepository {
	mock := &MockRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordRepository) EXPECT() *MockRecordRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordRepository) Create(record *models.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRecordRepositoryMockRecorder) Create(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordRepository)(nil).Create), record)
}

// Delete mocks base method.
func (m *MockRecordRepository) Delete(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordRepository)(nil).Delete), id)
}

// GetAllByClient mocks base method.
func (m *MockRecordRepository) GetAllByClient(id uint64) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByClient", id)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByClient indicates an expected call of GetAllByClient.
func (mr *MockRecordRepositoryMockRecorder) GetAllByClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByClient", reflect.TypeOf((*MockRecordRepository)(nil).GetAllByClient), id)
}

// GetAllByDoctor mocks base method.
func (m *MockRecordRepository) GetAllByDoctor(id uint64) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByDoctor", id)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByDoctor indicates an expected call of GetAllByDoctor.
func (mr *MockRecordRepositoryMockRecorder) GetAllByDoctor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByDoctor", reflect.TypeOf((*MockRecordRepository)(nil).GetAllByDoctor), id)
}

// GetAllRecordFilter mocks base method.
func (m *MockRecordRepository) GetAllRecordFilter(doctorId, clientId uint64) ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecordFilter", doctorId, clientId)
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecordFilter indicates an expected call of GetAllRecordFilter.
func (mr *MockRecordRepositoryMockRecorder) GetAllRecordFilter(doctorId, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecordFilter", reflect.TypeOf((*MockRecordRepository)(nil).GetAllRecordFilter), doctorId, clientId)
}

// GetAllRecords mocks base method.
func (m *MockRecordRepository) GetAllRecords() ([]models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecords")
	ret0, _ := ret[0].([]models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecords indicates an expected call of GetAllRecords.
func (mr *MockRecordRepositoryMockRecorder) GetAllRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecords", reflect.TypeOf((*MockRecordRepository)(nil).GetAllRecords))
}

// GetRecord mocks base method.
func (m *MockRecordRepository) GetRecord(id uint64) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", id)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockRecordRepositoryMockRecorder) GetRecord(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRecordRepository)(nil).GetRecord), id)
}
